require 'spec_helper'

describe 'symfony::app::parameters', type: :define do
  let :pre_condition do
    "symfony::app::parameters { '/test/symfony/app/config': }"
  end

  shared_examples 'parameters' do |params|

    p = {
      target: '/test/symfony/app/config',
    }

    p.merge!(params) if params

    it do
      should contain_file("#{p[:target]}/parameters.yml")
        .with({ensure: 'file', owner: p[:owner], group: p[:group]})
        .with_content(/# This file is auto-generated by Puppet./)
    end
  end

  context 'for osfamily Debian' do
    let(:facts) {{ :osfamily => 'Debian' }}
    let(:title) { 'Debian' }

    context 'defaults' do
      it_behaves_like 'parameters', {owner: 'www-data', group: 'www-data'}
    end

    context 'custom' do
      let :pre_condition do
        "symfony::app::parameters { '/test/symfony/app/config':
          owner => 'nobody',
          group => 'nobody',
        }"
      end
      params = {owner: 'nobody', group: 'nobody'}
      let(:params) { params }
      it_behaves_like 'parameters', params
    end
  end

  context 'for osfamily RedHat' do
    let(:facts) {{ :osfamily => 'RedHat' }}
    let(:title) { 'RedHat' }

    context 'defaults' do
      it_behaves_like 'parameters', {owner: 'apache', group: 'apache'}
    end

    context 'custom' do
      let :pre_condition do
        "symfony::app::parameters { '/test/symfony/app/config':
          owner => 'httpd',
          group => 'httpd',
        }"
      end
      params = {owner: 'httpd', group: 'httpd'}
      let(:params) { params }
      it_behaves_like 'parameters', params
    end
  end
end
